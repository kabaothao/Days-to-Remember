{"version":3,"sources":["utils/mutations.js","utils/queries.js","utils/auth.js","pages/HomePage/HomePage.js","components/Navbar.js","components/SignupForm.js","pages/AllUserEvents/AllUserEvents.js","components/LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","ADD_EVENT","REMOVE_EVENT","GET_ME","QUERY_EVENTS","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","getItem","idToken","setItem","window","location","assign","HomePage","useState","title","message","name","phoneNum","date","SaveInput","SetSaveInput","useMutation","update","cache","addEvent","data","events","readQuery","query","writeQuery","e","console","error","me","handleFormSubmit","event","a","preventDefault","variables","handleChange","target","value","React","showResults","setShowResults","Results","id","className","Auth","loggedIn","Form","onSubmit","Group","as","Row","controlId","Label","column","lg","Col","sm","Control","type","onChange","placeholder","required","span","offset","Button","onClick","to","AppNavbar","Navbar","fixed","Container","Brand","Link","Nav","Item","logout","SignupForm","username","email","password","userFormData","setUserFormData","history","useHistory","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","log","Error","login","push","htmlFor","Feedback","AllUserEvents","useQuery","loading","userData","removeEvent","handleDeleteEvent","eventId","reload","length","map","_id","format","unix","LoginForm","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed8979a5.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\n//use resolvers.js file as a guide to build mutations.\n\n//TODO:LOGIN_USER will execute the loginUser mutation set up using Apollo Server\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n//TODO:ADD_USER will execute the addUser mutation.\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n//1. use queries.js file as a guide to build ADD_EVENT  and REMOVE_EVENT\n//2. use typeDefs..js file as a guide to find type Mutation\n//TODO:ADD_EVENT will execute the ADD_EVENT mutation.\n\nexport const ADD_EVENT = gql`\n  mutation addEvent($title:String!, $message:String, $name:String, $phoneNum:String, $date:String) {\n    addEvent(title: $title, message: $message, name: $name, phoneNum: $phoneNum, date: $date) {\n      title\n      message\n      name\n      phoneNum\n      date\n\n      # cards {\n      #     _id\n      #     cardRecipient\n      #     cardText\n      #     cardSender\n      #     createdAt\n      # }\n    }\n  }\n`;\n\n//TODO:REMOVE_EVENT will execute the REMOVE_EVENT mutation.\n\nexport const REMOVE_EVENT = gql`\n  mutation removeEvent($eventId: ID!) {\n    removeEvent(eventId: $eventId) {\n      _id\n      title\n      message\n      name\n      phoneNum\n      date\n\n      # cards {\n      #   _id\n      #   cardRecipient\n      #   cardText\n      #   cardSender\n      #   createdAt\n      # }\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\n//use typeDefs as a guide to build gql\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      password\n      events {\n        _id\n        title\n        message\n        name\n        phoneNum\n        date\n      }\n      # cards {\n      #     _id\n      #     cardRecipient\n      #     cardText\n      #     cardSender\n      #     createdAt\n      # }\n    }\n  }\n`;\n\nexport const QUERY_EVENTS = gql`\n  query getEvents {\n    events {\n      _id\n      title\n      message\n      name\n      phoneNum\n      date\n      hasBeenSent\n    }\n  }\n`;\n\nexport const QUERY_EVENT = gql`\nquery getEvent($eventId: ID!) {\n  event(eventId: $eventId) {\n      _id\n      title\n      message\n      name\n      phoneNum\n      date\n      hasBeenSent\n  }\n}`\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from \"react\";\nimport \"./HomePage.css\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_EVENT } from \"../../utils/mutations\";\nimport { QUERY_EVENTS, GET_ME } from \"../../utils/queries\";\nimport { FaPhoneAlt } from \"react-icons/fa\";\nimport { ImCalendar } from \"react-icons/im\";\nimport { BsPersonFill, BsPenFill } from \"react-icons/bs\";\nimport Auth from \"../../utils/auth\";\n\nconst HomePage = () => {\n  //for datepicker\n  // const [startDate, setStartDate] = useState(new Date());\n\n  //declaring variables to useState\n  const [SaveInput, SetSaveInput] = useState({\n    title: \"\",\n    message: \"\",\n    name: \"\",\n    phoneNum: \"\",\n    date: \"\",\n  });\n  const [value, setValue] = useState();\n  const [addEvent, { error, data }] = useMutation(ADD_EVENT, {\n    update(cache, { data: { addEvent } }) {\n      try {\n        const { events } = cache.readQuery({ query: QUERY_EVENTS });\n\n        cache.writeQuery({\n          query: QUERY_EVENTS,\n          data: { events: [addEvent, ...events] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      // update me object's cache\n      const { me } = cache.readQuery({ query: GET_ME });\n      cache.writeQuery({\n        query: GET_ME,\n        data: { me: { ...me, events: [...me.events, addEvent] } },\n      });\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      // console.log(\"=======\", SaveInput);\n      const { data } = await addEvent({\n        variables: {\n          title: SaveInput.title,\n          message: SaveInput.message,\n          name: SaveInput.name,\n          phoneNum: SaveInput.phoneNum,\n          date: SaveInput.date,\n        },\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    SetSaveInput({ ...SaveInput, [name]: value });\n  };\n\n  const [showResults, setShowResults] = React.useState(false);\n  const onClick = () => setShowResults(true);\n\n  const Results = () => <div id=\"submit\">Your event has been saved!</div>;\n\n  return (\n    <div className=\"home-page\">\n      <div className=\"home-page-wrapper\">\n        {Auth.loggedIn() ? (\n          <>\n            <h3 className=\"dtr\">Add an Event</h3>\n\n            {/* User Form Beginning */}\n            <div className=\"form\">\n              <Form className=\"formWrapper\" onSubmit={handleFormSubmit}>\n                <Form.Group\n                  as={Row}\n                  className=\"mb-3\"\n                  controlId=\"formHorizontalTo\"\n                >\n                  <Form.Label column lg={6}>\n                    Title <BsPenFill />\n                  </Form.Label>\n                  <Col sm={10}>\n                    <Form.Control\n                      type=\"input\"\n                      name=\"title\"\n                      onChange={handleChange}\n                      placeholder=\"Event\"\n                      required\n                    />\n                  </Col>\n                </Form.Group>\n\n                <Form.Group\n                  as={Row}\n                  className=\"mb-3\"\n                  controlId=\"formHorizontalTo\"\n                >\n                  <Form.Label column lg={6}>\n                    Message <BsPenFill />\n                  </Form.Label>\n                  <Col sm={10}>\n                    <Form.Control\n                      type=\"input\"\n                      name=\"message\"\n                      onChange={handleChange}\n                      placeholder=\"Your message here\"\n                      required\n                    />\n                  </Col>\n                </Form.Group>\n\n                <Form.Group\n                  as={Row}\n                  className=\"mb-3\"\n                  controlId=\"formHorizontalTo\"\n                >\n                  <Form.Label column lg={6}>\n                    To <BsPersonFill />\n                  </Form.Label>\n                  <Col sm={10}>\n                    <Form.Control\n                      type=\"input\"\n                      name=\"name\"\n                      onChange={handleChange}\n                      placeholder=\"Name\"\n                      required\n                    />\n                  </Col>\n                </Form.Group>\n\n                <Form.Group\n                  as={Row}\n                  className=\"mb-3\"\n                  controlId=\"formHorizontalFrom\"\n                >\n                  <Form.Label column lg={6}>\n                    Phone Number <FaPhoneAlt />\n                  </Form.Label>\n                  <Col sm={10}>\n                    <Form.Control\n                      type=\"input\"\n                      name=\"phoneNum\"\n                      onChange={handleChange}\n                      placeholder=\"+1-XXX-XXX-XXXX\"\n                      required\n                    />\n                  </Col>\n                </Form.Group>\n\n                {/* In place of a date-picker */}\n                <Form.Group\n                  as={Row}\n                  className=\"mb-3\"\n                  controlId=\"formHorizontalFrom\"\n                >\n                  <Form.Label column lg={6}>\n                    Date <ImCalendar />\n                  </Form.Label>\n                  <Col sm={10}>\n                    <Form.Control\n                      type=\"input\"\n                      name=\"date\"\n                      onChange={handleChange}\n                      placeholder=\"mm/dd/yyyy\"\n                      required\n                    />\n                  </Col>\n                </Form.Group>\n                {/* \n                <Form.Label column lg={6}>\n                  Pick the date\n                </Form.Label>\n                <DatePicker\n                className=\"date-picker\"\n                  type=\"input\"\n                  name=\"date\"\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  onChange={handleChange}\n                /> */}\n\n                <Form.Group as={Row} className=\"mb-3\">\n                  <Col sm={{ span: 10, offset: 2 }}>\n                    <Button type=\"submit\" onClick={onClick}>\n                      {\" \"}\n                      Submit\n                    </Button>\n                  </Col>\n                </Form.Group>\n                <h4>{showResults ? <Results /> : null}</h4>\n              </Form>\n            </div>\n            {/* User Form End */}\n          </>\n        ) : (\n          <h2 className=\"welcome\">\n            Welcome to DAYS TO REMEMBER. Please <Link to=\"/login\">login</Link> or{\" \"}\n            <Link to=\"/signup\">signup</Link> to add an\n            event.\n          </h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Container, Nav, Modal, Tab } from \"react-bootstrap\";\nimport \"./Navbar.css\";\nimport { MdCake } from \"react-icons/md\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  const logout = (event) => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <>\n      <Navbar className=\"nav\" fixed=\"top\">\n        <Container>\n          <Navbar.Brand className=\"cake\" as={Link} to='/'>\n            <div className=\"logo\">  DR <MdCake /></div>\n          {\" \"}\n          </Navbar.Brand>\n        </Container>\n        {/* if user is logged in show saved books and logout */}\n        {Auth.loggedIn() ? (\n          <>\n            <Nav.Item>\n              <Nav.Link className=\"btn btn-lg btn-info m-2\" to=\"/events\">\n              <Link to=\"/events\">Events</Link> \n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                className=\"btn btn-lg btn-info m-2\"\n                onClick={Auth.logout}\n              >\n                Logout\n              </Nav.Link>\n            </Nav.Item>\n          </>\n        ) : (\n          <>\n            <Link className=\"btn btn-lg btn-info m-2\" to=\"/login\">\n              Login\n            </Link>\n            <Link className=\"btn btn-lg btn-light m-2\" to=\"/signup\">\n              Signup\n            </Link>\n          </>\n        )}\n      </Navbar>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React, { useState } from \"react\";\nimport \"./Form.css\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { useHistory } from \"react-router-dom\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  let history = useHistory();\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    try {\n      //set up useMutation hook\n      const { data } = await addUser({ variables: userFormData });\n      console.log(data);\n      if (!data) {\n        throw new Error(\"something went wrong!\");\n      }\n      //pass in token recevied from mutation response\n      Auth.login(data.addUser.token);\n      //part of mutation use\n      history.push(\"/\");\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    // Login Form\n    <div className=\"form-wrapper\">\n      <div className=\"form-left\">\n        <Form onSubmit={handleFormSubmit}>\n          <h1>Signup</h1>\n          <Form.Group>\n            <Form.Label htmlFor=\"username\">Username</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Your username\"\n              name=\"username\"\n              onChange={handleInputChange}\n              value={userFormData.username}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {/* Username is required! */}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label htmlFor=\"email\">Email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Your email address\"\n              name=\"email\"\n              onChange={handleInputChange}\n              value={userFormData.email}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {/* Email is required! */}\n            </Form.Control.Feedback>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label htmlFor=\"password\">Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Your password\"\n              name=\"password\"\n              onChange={handleInputChange}\n              value={userFormData.password}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {/* Password is required! */}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState, useEffect } from \"react\";\nimport Moment from \"react-moment\";\nimport \"moment-timezone\";\nimport \"./AllUserEvents.css\";\nimport { Button } from \"react-bootstrap\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { QUERY_EVENTS, QUERY_EVENT, GET_ME } from \"../../utils/queries\";\nimport { REMOVE_EVENT } from \"../../utils/mutations\";\nimport { FaGrinStars } from \"react-icons/fa\";\n\nconst AllUserEvents = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me.events || [];\n  const [removeEvent] = useMutation(REMOVE_EVENT);\n  const [showResults, setShowResults] = React.useState(false);\n  // const Results = () => <div id=\"delete\">Your event has been deleted! Pleas refresh the page =)</div>;\n\n  const handleDeleteEvent = async (eventId) => {\n    // const token = Auth.loggedIn() ? Auth.getToken() : null;\n    try {\n      const { data } = await removeEvent({\n        variables: {\n          eventId: eventId,\n        },\n      });\n      console.log(\"data\", data, \"updated userdata\", userData);\n      setShowResults(true);\n      window.location.reload();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (!userData.length) {\n    return <h3 className=\"no-events\">No Events Yet</h3>;\n  }\n\n  return (\n    <div className=\"events-page\">\n      <h1 className=\"event-page-discr\">Your Events</h1>\n\n      {userData &&\n        userData.map((event) => (\n          <>\n            <div className=\"event-border\">\n              <div key={event._id} className=\"event-title\">\n                {event.title} <FaGrinStars />\n              </div>\n              <div key={event._id} className=\"event-name\">\n                of {event.name}\n              </div>\n              <div key={event._id} className=\"event-date\">\n                <Moment format=\"MM/DD/YYYY\" unix>\n                  {event.date / 1000}\n                </Moment>\n                <div>\n                  <Button\n                    onClick={() => handleDeleteEvent(event._id)}\n                    className=\"event-delete-btn\"\n                    type=\"submit\"\n                  >\n                    delete\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </>\n        ))}\n    </div>\n  );\n};\n\nexport default AllUserEvents;\n","import React, { useState } from \"react\";\nimport \"./Form.css\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { useHistory } from \"react-router-dom\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [login] = useMutation(LOGIN_USER);\n  let history = useHistory();\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: userFormData,\n      });\n      console.log(data);\n      if (!data) {\n        throw new Error(\"something went wrong!\");\n      }\n      Auth.login(data.login.token);\n      history.push(\"/\");\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <div className=\"form-wrapper\">\n      <div className=\"form-right\">\n        <Form onSubmit={handleFormSubmit}>\n          <h1>Login</h1>\n          <Form.Group>\n            <Form.Label htmlFor=\"username\">Email</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Your email\"\n              name=\"email\"\n              onChange={handleInputChange}\n              value={userFormData.email}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {/* Email is required! */}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"password\">Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Your password\"\n              name=\"password\"\n              onChange={handleInputChange}\n              value={userFormData.password}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              {/* Password is required! */}\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport HomePage from './pages/HomePage/HomePage';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n\nimport Navbar from './components/Navbar';\nimport SignupForm from './components/SignupForm';\nimport AllUserEvents from './pages/AllUserEvents/AllUserEvents';\nimport LoginForm from './components/LoginForm';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n      <div>\n          <Navbar />\n          <Switch>\n          <Route exact path=\"/signup\" component={SignupForm} />\n          <Route exact path=\"/login\" component={LoginForm} />\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/events\" component={AllUserEvents} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}