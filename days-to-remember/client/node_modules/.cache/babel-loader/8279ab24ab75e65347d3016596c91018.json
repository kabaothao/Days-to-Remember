{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useQuery } from \"./useQuery.js\";\nvar EAGER_METHODS = ['refetch', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a = useState({\n    called: false,\n    resolves: []\n  }),\n      execution = _a[0],\n      setExecution = _a[1];\n\n  var execute = useCallback(function (executeOptions) {\n    var resolve;\n    var promise = new Promise(function (resolve1) {\n      return resolve = resolve1;\n    });\n    setExecution(function (execution) {\n      if (execution.called) {\n        result && result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables);\n      }\n\n      return {\n        called: true,\n        resolves: __spreadArray(__spreadArray([], execution.resolves, true), [resolve], false),\n        options: executeOptions\n      };\n    });\n    return promise;\n  }, []);\n  var result = useQuery(query, __assign(__assign(__assign({}, options), execution.options), {\n    fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby',\n    skip: undefined\n  }));\n  useEffect(function () {\n    var resolves = execution.resolves;\n\n    if (!result.loading && resolves.length) {\n      setExecution(function (execution) {\n        return __assign(__assign({}, execution), {\n          resolves: []\n        });\n      });\n      resolves.forEach(function (resolve) {\n        return resolve(result);\n      });\n    }\n  }, [result, execution]);\n\n  if (!execution.called) {\n    result = __assign(__assign({}, result), {\n      loading: false,\n      data: void 0,\n      error: void 0,\n      called: false\n    });\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      result[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        setExecution(function (execution) {\n          return __assign(__assign({}, execution), {\n            called: true\n          });\n        });\n        return method.apply(void 0, args);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n  }\n\n  return [execute, result];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResult,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<\n    {\n      called: boolean,\n      options?: QueryLazyOptions<TVariables>,\n      resolves: Array<(result: LazyQueryResult<TData, TVariables>) => void>,\n    }\n  >({\n    called: false,\n    resolves: [],\n  });\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    let resolve!: (result: LazyQueryResult<TData, TVariables>) => void;\n    const promise = new Promise<LazyQueryResult<TData, TVariables>>(\n      (resolve1) => (resolve = resolve1),\n    );\n    setExecution((execution) => {\n      if (execution.called) {\n        result && result.refetch(executeOptions?.variables);\n      }\n\n      return {\n        called: true,\n        resolves: [...execution.resolves, resolve],\n        options: executeOptions,\n      };\n    });\n\n    return promise;\n  }, []);\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We donâ€™t set skip to execution.called, because we need useQuery to call\n    // addQueryPromise, so that ssr calls waits for execute to be called.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n  useEffect(() => {\n    const { resolves } = execution;\n    if (!result.loading && resolves.length) {\n      setExecution((execution) => ({ ...execution, resolves: [] }));\n      resolves.forEach((resolve) => resolve(result));\n    }\n  }, [result, execution]);\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      // TODO: fix the type of result\n      called: false as any,\n    };\n\n\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      result[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n  }\n\n  // TODO: fix the type of result\n  return [execute, result as LazyQueryResult<TData, TVariables>];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}