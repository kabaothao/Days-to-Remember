{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useMemo, useEffect, useRef, useState } from 'react';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    execute: null,\n    client: client,\n    mutation: mutation,\n    options: options\n  });\n  var execute = useMemo(function () {\n    if (ref.current.execute != null && ref.current.client === client && equal(options, ref.current.options) && equal(mutation, ref.current.mutation)) {\n      return ref.current.execute;\n    }\n\n    ref.current.client = client;\n    ref.current.options = options;\n    ref.current.mutation = mutation;\n\n    ref.current.execute = function (executeOptions) {\n      if (executeOptions === void 0) {\n        executeOptions = {};\n      }\n\n      var baseOptions = __assign(__assign({}, options), {\n        mutation: mutation\n      });\n\n      if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n        setResult(ref.current.result = {\n          loading: true,\n          error: void 0,\n          data: void 0,\n          called: true,\n          client: client\n        });\n      }\n\n      var mutationId = ++ref.current.mutationId;\n      var clientOptions = mergeOptions(baseOptions, executeOptions);\n      return client.mutate(clientOptions).then(function (response) {\n        var _a, _b;\n\n        var data = response.data,\n            errors = response.errors;\n        var error = errors && errors.length > 0 ? new ApolloError({\n          graphQLErrors: errors\n        }) : void 0;\n\n        if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n          var result_1 = {\n            called: true,\n            loading: false,\n            data: data,\n            error: error,\n            client: client\n          };\n\n          if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n            setResult(ref.current.result = result_1);\n          }\n        }\n\n        (_a = baseOptions.onCompleted) === null || _a === void 0 ? void 0 : _a.call(baseOptions, response.data);\n        (_b = executeOptions.onCompleted) === null || _b === void 0 ? void 0 : _b.call(executeOptions, response.data);\n        return response;\n      }).catch(function (error) {\n        var _a, _b;\n\n        if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n          var result_2 = {\n            loading: false,\n            error: error,\n            data: void 0,\n            called: true,\n            client: client\n          };\n\n          if (!equal(ref.current.result, result_2)) {\n            setResult(ref.current.result = result_2);\n          }\n        }\n\n        if (baseOptions.onError || clientOptions.onError) {\n          (_a = baseOptions.onError) === null || _a === void 0 ? void 0 : _a.call(baseOptions, error);\n          (_b = executeOptions.onError) === null || _b === void 0 ? void 0 : _b.call(executeOptions, error);\n          return {\n            data: void 0,\n            errors: error\n          };\n        }\n\n        throw error;\n      });\n    };\n\n    return ref.current.execute;\n  }, [client, mutation, options]);\n  var reset = useCallback(function () {\n    setResult({\n      called: false,\n      loading: false,\n      client: client\n    });\n  }, []);\n  useEffect(function () {\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    execute: null as null | MutationTuple<TData, TVariables, TContext, TCache>[0],\n    client,\n    mutation,\n    options,\n  });\n\n  const execute = useMemo(() => {\n    if (\n      ref.current.execute != null &&\n      ref.current.client === client &&\n      equal(options, ref.current.options) &&\n      equal(mutation, ref.current.mutation)) {\n      return ref.current.execute;\n    }\n\n    ref.current.client = client;\n    ref.current.options = options;\n    ref.current.mutation = mutation;\n    ref.current.execute = (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {},\n    ) => {\n      const baseOptions = { ...options, mutation };\n      if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n        setResult(ref.current.result = {\n          loading: true,\n          error: void 0,\n          data: void 0,\n          called: true,\n          client,\n        });\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(\n        baseOptions,\n        executeOptions as any,\n      );\n\n      return client.mutate(clientOptions).then((response) =>{\n        const { data, errors } = response;\n        const error =\n          errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n        if (\n          mutationId === ref.current.mutationId &&\n          !clientOptions.ignoreResults\n        ) {\n          const result = {\n            called: true,\n            loading: false,\n            data,\n            error,\n            client,\n          };\n\n          if (ref.current.isMounted && !equal(ref.current.result, result)) {\n            setResult(ref.current.result = result);\n          }\n        }\n\n        baseOptions.onCompleted?.(response.data!);\n        executeOptions.onCompleted?.(response.data!);\n        return response;\n      }).catch((error) => {\n        if (\n          mutationId === ref.current.mutationId &&\n          ref.current.isMounted\n        ) {\n          const result = {\n            loading: false,\n            error,\n            data: void 0,\n            called: true,\n            client,\n          };\n\n          if (!equal(ref.current.result, result)) {\n            setResult(ref.current.result = result);\n          }\n        }\n\n        if (baseOptions.onError || clientOptions.onError) {\n          baseOptions.onError?.(error);\n          executeOptions.onError?.(error);\n          // TODO(brian): why are we returning this here???\n          return { data: void 0, errors: error };\n        }\n\n        throw error;\n      });\n    };\n\n    return ref.current.execute;\n  }, [client, mutation, options]);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}