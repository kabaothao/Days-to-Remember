{"ast":null,"code":"import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken(); // If there is a token and it's not expired, return `true`\n\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token); // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    } // If token hasn't passed its expiration time, return `false`\n\n\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/Users/alenakadochnikova/Desktop/project-3/Project-3/days-to-remember/client/src/utils/auth.js"],"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","localStorage","removeItem","getItem","login","idToken","setItem","window","location","assign","logout","reload"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,UAAU,GAAG;AACX,WAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd,CADS,CAET;;AACA,WAAOE,KAAK,IAAI,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAV,GAAuC,IAAvC,GAA8C,KAArD;AACD;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACpB;AACA,UAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB,CAFoB,CAGpB;;AACA,QAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnCC,MAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,aAAO,IAAP;AACD,KAPmB,CAQpB;;;AACA,WAAO,KAAP;AACD;;AAEDT,EAAAA,QAAQ,GAAG;AACT,WAAOQ,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACbJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;AACAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACPT,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAK,IAAAA,MAAM,CAACC,QAAP,CAAgBG,MAAhB;AACD;;AAnCe;;AAsClB,eAAe,IAAIpB,WAAJ,EAAf","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}